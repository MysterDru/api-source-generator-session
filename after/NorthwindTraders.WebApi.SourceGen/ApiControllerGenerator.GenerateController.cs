using System.Text;

namespace NorthwindTraders.WebApi.SourceGen;

/// <remarks>
///     This partial class contains the logic to generate the controller class for the specified service.
///     It uses the <see cref="ControllerToGenerate"/> to determine the controller contents.
/// </remarks>
public partial class ApiControllerGenerator
{
    private static void GenerateController(SourceProductionContext context,
        ControllerToGenerate generateInfo)
    {
        var sourceText = new StringBuilder("/// <auto-generated />\n")
            .AppendLine("using Microsoft.AspNetCore.Mvc;")
            .AppendLine("using System;")
            .AppendLine("using System.Collections.Generic;")
            .AppendLine("using System.Threading.Tasks;")
            .AppendLine()
            .AppendLine($"namespace {generateInfo.Namespace};")
            .AppendLine()
            .AppendLine("[ApiController]")
            .AppendLine(
                $"public class {generateInfo.ClassName}Controller({generateInfo.ServiceTypeFullyQualifiedName} service) : ControllerBase")
            .AppendLine("{");

        foreach (var method in generateInfo.Methods)
        {
            sourceText.AppendLine();

            if (method.InterfaceName == "IGetHandler")
            {
                sourceText
                    .AppendLine($"\t[HttpGet(\"/api/{generateInfo.EntityName}.get\")]");
                if (method.QualifiedTypeParameters.Count == 1)
                {
                    sourceText.AppendLine(
                            $"\tpublic async Task<ActionResult<{method.QualifiedTypeParameters[0]}>> Get(int id)")
                        .AppendLine("\t\t=> Ok(await service.GetAsync(id, default));");
                }
                else if (method.QualifiedTypeParameters.Count == 2)
                {
                    sourceText.AppendLine(
                            $"\tpublic async Task<ActionResult<{method.QualifiedTypeParameters[1]}>> Get({method.QualifiedTypeParameters[0]} args)")
                        .AppendLine("\t\t=> Ok(await service.GetAsync(args, default));");
                }
            }
            else if (method.InterfaceName == "IGetListHandler")
            {
                sourceText.AppendLine($"\t[HttpGet(\"/api/{generateInfo.EntityName}.list\")]");
                if (method.QualifiedTypeParameters.Count == 1)
                {
                    sourceText.AppendLine(
                            $"\tpublic async Task<ActionResult<IReadOnlyList<{method.QualifiedTypeParameters[0]}>>> GetList()")
                        .AppendLine("\t\t=> Ok(await service.GetListAsync(default));");
                }
                else if (method.QualifiedTypeParameters.Count == 2)
                {
                    sourceText.AppendLine(
                            $"\tpublic async Task<ActionResult<IReadOnlyList<{method.QualifiedTypeParameters[1]}>>> GetList({method.QualifiedTypeParameters[0]} args)")
                        .AppendLine("\t\t=> Ok(await service.GetListAsync(args, default));");
                }
            }
            else if (method.InterfaceName == "ICreateHandler")
            {
                sourceText.AppendLine($"\t[HttpPost(\"/api/{generateInfo.EntityName}.create\")]")
                    .AppendLine(
                        $"\tpublic async Task<ActionResult<{method.QualifiedTypeParameters[1]}>> Create({method.QualifiedTypeParameters[0]} request)")
                    .AppendLine("\t{")
                    .AppendLine("\t\tvar id = await service.CreateAsync(request, default);")
                    .AppendLine("\t\treturn Ok(await service.GetAsync(id, default));")
                    .AppendLine("\t}");
            }
            else if (method.InterfaceName == "IUpdateHandler")
            {
                sourceText.AppendLine($"\t[HttpPost(\"/api/{generateInfo.EntityName}.update\")]");
                if (method.QualifiedTypeParameters.Count == 1)
                {
                    sourceText.AppendLine(
                            $"\tpublic async Task<NoContentResult> Update(int id, {method.QualifiedTypeParameters[0]} request)")
                        .AppendLine("\t{")
                        .AppendLine("\t\tawait service.UpdateAsync(id, request, default);");
                }
                else
                {
                    sourceText.AppendLine(
                            $"\tpublic async Task<NoContentResult> Update({method.QualifiedTypeParameters[0]} args, {method.QualifiedTypeParameters[1]} request)")
                        .AppendLine("\t{")
                        .AppendLine("\t\tawait service.UpdateAsync(args, request, default);");
                }

                sourceText.AppendLine("\t\treturn NoContent();")
                    .AppendLine("\t}");
            }
            else if (method.InterfaceName == "IDeleteHandler")
            {
                sourceText.AppendLine($"\t[HttpPost(\"/api/{generateInfo.EntityName}.delete\")]");
                if (method.QualifiedTypeParameters.Count == 1)
                {
                    sourceText.AppendLine(
                            $"\tpublic async Task<NoContentResult> Delete({method.QualifiedTypeParameters[0]} args)")
                        .AppendLine("\t{")
                        .AppendLine("\t\tawait service.DeleteAsync(args, default);");
                }
                else
                {
                    sourceText.AppendLine(
                            $"\tpublic async Task<NoContentResult> Delete(int id)")
                        .AppendLine("\t{")
                        .AppendLine("\t\tawait service.DeleteAsync(id, default);");
                }

                sourceText.AppendLine("\t\treturn NoContent();")
                    .AppendLine("\t}");
            }
            else if (method.InterfaceName == "ISaveHandler")
            {
                sourceText.AppendLine($"\t[HttpPost(\"/api/{generateInfo.EntityName}.save\")]")
                    .AppendLine(
                        $"\tpublic async Task<NoContentResult> Save({method.QualifiedTypeParameters[0]} request)")
                    .AppendLine("\t{")
                    .AppendLine("\t\tawait service.SaveAsync(request, default);")
                    .AppendLine("\t\treturn NoContent();")
                    .AppendLine("\t}");
            }
        }

        sourceText.AppendLine("}");

        context.AddSource($"{generateInfo.ClassName}Controller.g.cs", sourceText.ToString());
    }
}